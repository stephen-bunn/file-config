# Stubs for file_config._file_config (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .constants import CONFIG_KEY
from .schema_builder import build_schema
from .utils import encode_bytes, is_array_type, is_bytes_type, is_config, is_config_type, is_config_var, is_enum_type, is_object_type, is_typing_type, typecast
from typing import Any, Optional

class _ConfigEntry:
    type: Any = ...
    default: Any = ...
    name: Any = ...
    title: Any = ...
    description: Any = ...
    required: Any = ...
    examples: Any = ...
    encoder: Any = ...
    decoder: Any = ...
    min: Any = ...
    max: Any = ...
    unique: Any = ...
    contains: Any = ...
    def __init__(self, type: Any, default: Any, name: Any, title: Any, description: Any, required: Any, examples: Any, encoder: Any, decoder: Any, min: Any, max: Any, unique: Any, contains: Any) -> None: ...
    def __ne__(self, other: Any) -> None: ...
    def __eq__(self, other: Any) -> None: ...
    def __lt__(self, other: Any) -> None: ...
    def __le__(self, other: Any) -> None: ...
    def __gt__(self, other: Any) -> None: ...
    def __ge__(self, other: Any) -> None: ...

def _handle_dumps(self, handler: Any, **kwargs: Any): ...
def _handle_dump(self, handler: Any, file_object: Any, **kwargs: Any): ...
@classmethod
def _handle_loads(cls, handler: Any, content: Any, validate: bool = ..., **kwargs: Any): ...
@classmethod
def _handle_load(cls, handler: Any, file_object: Any, validate: bool = ..., **kwargs: Any): ...
def config(maybe_cls: Optional[Any] = ..., these: Optional[Any] = ..., title: Optional[Any] = ..., description: Optional[Any] = ...): ...
def var(type: Optional[Any] = ..., default: Optional[Any] = ..., name: Optional[Any] = ..., title: Optional[Any] = ..., description: Optional[Any] = ..., required: bool = ..., examples: Optional[Any] = ..., encoder: Optional[Any] = ..., decoder: Optional[Any] = ..., min: Optional[Any] = ..., max: Optional[Any] = ..., unique: Optional[Any] = ..., contains: Optional[Any] = ..., **kwargs: Any): ...
def make_config(name: Any, var_dict: Any, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any): ...
def _build(config_cls: Any, dictionary: Any, validate: bool = ...): ...
def _dump(config_instance: Any, dict_type: Any = ...): ...
def validate(instance: Any) -> None: ...
def from_dict(config_cls: Any, dictionary: Any, validate: bool = ...): ...
def to_dict(instance: Any, dict_type: Any = ...): ...
